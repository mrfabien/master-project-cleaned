ylab= "",
xlab="")
#5)
qqnorm(X,
xlab = "quantiles théoriques normaux",
ylab = "Valeurs de X",
main = "qq-plot normal des valeurs de X")
qqline(X)
legend("topleft", legend = "Droite d'Henri",
lty = 1,   # pour dessiner une ligne pleine en légende
col = "black", # de couleur noire
cex=0.5,   #'cex=0.5' pour la grandeur des caractères de la légende
bty = "n") # 'bty = "n"' pour supprimer l'encadrement
# 6)
set.seed(06032004) # pour stabiliser le générateur pseudo-aléatoire
# 6_1)
λ = runif(1,min = 30, max = 50) # 1 seule valeur λ demandée, comprise entre un minimum de 5 et un maximum 10, générée aléatoirement suivant une distribution uniforme
#6_2)
X = rchisq(2000,λ)
#6_3)
library(moments)
asymétrie = skewness(X) # = 0.52
aplatissement = kurtosis(X) # = 3.25
round(asymétrie, 2) # pour les arrondir à 2 chiffres significatifs
round(aplatissement, 2) # pour les arrondir à 2 chiffres significatifs
#6_4a)
hist(X,xlim=c(0,3*λ),
xlab="X",
main="Histogramme des valeurs de X")
#6_4b)
x = seq(0,3*λ,length.out=1000)
y = dnorm(x, mean = λ,sd = sqrt(2*λ))
plot(x, y,
xlim=c(0,3*λ),
axes=FALSE,
xlab="",
ylab="")
#6_4c)
hist(X,xlim=c(0,3*λ),
xlab="X",
ylab="Fréquence",
main="Distribution des valeurs de X")
par(new=TRUE) # pour superposer les deux graphiques
plot(x, y,
xlim=c(0,3*λ),
axes=FALSE,
xlab="",
ylab="")
#6_5)
qqnorm(X,
xlab = "quantiles théoriques normaux",
ylab = "Valeurs de X",
main = "qq-plot normal des valeurs de X")
qqline(X)
legend("topleft", legend = "Droite d'Henri",
lty = 1,   # pour dessiner une ligne pleine en légende
col = "black", # de couleur noire
cex=0.5,   #'cex=0.5' pour la grandeur des caractères de la légende
bty = "n") # 'bty = "n"' pour supprimer l'encadrement
#1
set.seed(04112002)
λ=runif(1,5,10)
print(λ) #lamba=6.26560027594678
#2
set.seed(04112002)
X=rpois(9000,λ)
#Valeur de l'asymétrie
asy=round(skewness(X),2)
#Valeur de l'aplatissement
apla=round(kurtosis(X),2)
#4a
maxX=max(X); print(maxX) #minimum de X
minX=min(X); print(minX) #maximum de X
lim=4*λ; print(lim) #limite sup demandée pour l'histogramme
#Les valeurs de X varient de 0 à 16, il n'y aurait pas eu besoin de spécifier l'intervalle [0,4*λ] pour l'histogramme dans ce cas.
hist(X,xlim=c(0,4*λ),main="Distribution de X",ylab="Fréquence")
#4b
xx=seq(0,lim,length.out=1000) #1000 valeurs espacées régulièrement dans l'intervalle
u=λ  #moyenne
o=sqrt(λ) #écart-type
yy=dnorm(xx,u,o)
plot(xx,yy, axes=FALSE, main="Densité de proba normale, pour moy=λ et é-type=racine de λ")
hist(X,xlim=c(0,4*λ), axes=FALSE, xlab="", ylab="", main="Superposition des graphiques")
par(new=TRUE)
plot(xx,yy, axes=FALSE, xlab="", ylab="")
par(new=FALSE)
#5
qqnorm(X, xlab="Quantiles théoriques noramaux correspndants", ylab="Valeurs de X"); qqline(X)
#6
set.seed(04112002)
#5
qqnorm(X, xlab="Quantiles théoriques noramaux correspndants", ylab="Valeurs de X"); qqline(X)
#6
set.seed(04112002)
λ.6=runif(1,30,50)
print(λ.6) #lamba=35.0624
set.seed(04112002)
X.6=rpois(2000,λ.6)
#Valeur de l'asymétrie
asy=round(skewness(X.6),2)
#Valeur de l'aplatissement
apla=round(kurtosis(X.6),2)
#Graphiques
hist(X.6,xlim=c(0,3*λ.6),main="Distribution de X.6",ylab="Fréquence")
xx.6=seq(0,3*λ.6,length.out=1000) #1000 valeurs espacées régulièrement dans l'intervalle
u.6=λ.6  #moyenne
o.6=sqrt(2*λ.6) #écart-type
yy.6=dnorm(xx.6,u.6,o.6)
plot(xx.6,yy.6, axes=FALSE, main="Densité de proba normale, pour moy=λ.6 et é-type=racine de 2λ.6")
hist(X.6,xlim=c(0,3*λ.6), axes=FALSE, xlab="", ylab="", main="Superposition des graphiques")
par(new=TRUE)
plot(xx.6,yy.6, axes=FALSE, xlab="", ylab="")
par(new=FALSE)
#Normal Q-Q plot
qqnorm(X.6, xlab="Quantiles théoriques noramaux correspndants", ylab="Valeurs de X.6"); qqline(X.6)
#(0)
#Je "stabilise" le générateur:
set.seed(22102002)
#(1)
#Je génére une valeur lambda distribué uniformément entre 5 et 10:
lambda <- runif(1,min=5,max=10)
print(lambda) #8.746739
#(2)
#Je génére une série X de 9000 valeurs distribuées selon une loi de Poisson (lambda):
X <- rpois(9000,lambda)
#(3)
#Je calcul les valeurs de l'asimétrie et aplatissement de X (2 décimales):
#J'installe package moments
install.packages("moments")
library(moments)
asymetrie <- skewness(X)
print(asymetrie)
aplatissement <- kurtosis(X)
print(aplatissement)
asymetrie_2_décimales <- round(asymetrie,2) #round est pour arrondir
print(asymetrie_2_décimales) # 0.33
aplatissement_2_décimales <- round(aplatissement,2)
print(aplatissement_2_décimales) # 3.16
#(4a)
#Je crée l'intervalle [0,4*lambda]:
intervalle_0_4lambda <- c(0,4*lambda)
#Je crée l'histogramme:
hist(X,xlim=intervalle_0_4lambda,ylab="fréquence",main="Histogramme des valeurs de X")
#(4b)
#Je produie 1000 valeurs x régulièrement espacées x dans ce même intervalle:
x <- seq(0,4*lambda,length.out=1000)
mu <- lambda
sigma <- sqrt(lambda)
fréquence <- dnorm(x,mean=mu,sd=sigma)
plot(x,fréquence,axes=FALSE,col=blues9)
#(4c)
#Je superpose les deux graphiques précédents:
hist(X,xlim=intervalle_0_4lambda,ylab="fréquence",main="Histogramme des valeurs de X",col="red")
par(new=TRUE)
plot(x,fréquence,axes=FALSE,col=blues9)
#(5)
# Création du qq-plot normal et de la ligne de Henry correspondante des valeurs de X:
qqnorm(X,col="red") #qq-plot normale
qqline(X,col="blue") #droite de Henry
#(6)
#(6.1)
#Je créecune valeur lambda distribué uniformément entre 30 et 50:
lambda6 <- runif(1,min=30,max=50)
print(lambda6) #46.812
#(6.2)
#Géneration d'une serie X de 2000 valeurs distribuées selon le chi^2 à lambda dégrés de liberté:
X6 <- rchisq(2000,lambda6)
#(6.3)
#Je calcul les valeurs d'asymétrie et d'aplatissement:
asymetrie6 <- skewness(X6)
print(asymetrie6)
aplatissement6 <- kurtosis(X6)
print(aplatissement6)
#arrondissement à deux chiffres après la virgoule:
asymetrie6_2_décimales <- round(asymetrie6,2)
print(asymetrie6_2_décimales) # 0.41
aplatissement6_2_décimales <- round(aplatissement6,2)
print(aplatissement6_2_décimales) # 3.31
#(6.4a)
#Je crée l'intervalle [0;3*lambda6]:
intervalle6 <- c(0,3*lambda6)
#Je crée l'histogramme:
hist(X6,xlim=intervalle6,ylab="fréquence",main="Histogramme des valeurs de X")
#(6.4b)
##Je produie 1000 valeurs x régulièrement espacées x dans ce même intervalle:
x6 <- seq(0,3*lambda6,length.out=1000)
mu6 <- lambda6
sigma6 <- sqrt(2*lambda6)
y6 <- dnorm(x6,mean=mu6,sd=sigma6)
plot(x6,y6,axes=FALSE,col=blues9,main="Histogramme des valeurs de X")
#(6.4c)
#Je superpose les deux graphiques précédents:
hist(X6,xlim=intervalle6,ylab="fréquence",xlab="X",main="Histogramme des valeurs de X",col="red")
par(new=TRUE)
plot(x6,y6,ylab="fréquance",xlab="X",axes=FALSE,col=blues9,main="Valeurs de X")
#(6.5)
# Création du qq-plot normal et de la ligne de Henry correspondante des valeurs de X6
qqnorm(X6,col="red") #qq-plot normale
qqline(X6,col="blue") #droite de Henry
#---Partie 0 & 1)---
set.seed(08082000) 		#Pose une graine pour que la fonction runif() suivante donne toujours le même résultat
u=runif(1,5,10) 		#Création d'une valeur λ, ici nommée "u",  uniforme entre 5 et 10 (y compris).
print(u)				#Affiche la valeur u = 8.906124
#---Partie 2)---
X=rpois(9000,u) 		#Génère une série "X" de 9000 valeurs selon une loi de Poisson de paramètre u.
asymetrie=skewness(X) 			#Nous donne le coefficient d'asymétrie. Asymétrie = 0.40.
aplatissement=kurtosis(X) 		#Nous donne le coefficient d'aplatissement. Aplatissement = 3.25.
print(asymetrie)
print(aplatissement)
#---Partie 4a)---
u4=4*u 		#Nous permet simplement de créer une variable 4*u pour l'intervalle suivante.
Xintervalle=X[X>=0 & X<=(4*u)] #Nous crééons l'intervalle entre [0,4u]. Cela est égal à X car ses valeurs vont de 1 à 25 ce qui est entièrement compris dans l'intervalle [0,4u], car 4u = 35.62.
hist(Xintervalle, freq=FALSE, main="Histogramme de densité de X", xlab="Valeur de x", ylab="Densité", xlim=c(0,u4), ylim=c(0.00,0.14)) #Création de l'histogramme de densité de X.
#---Partie 4b)---
Valeurs4bx=seq(0, u4, length.out=1000) 		#Produit 1000 valeurs x uniformément espacées dans l'intervalle [0,4u].
Valeurs4by=dnorm(Valeurs4bx, mean=u, sd=sqrt(u)) 	#Produit 1000 valeurs y correspondantes y = f(x) suivant la densité de probabilité normale où la moyenne = u et l'écart-type vaut racine carrée de u.
plot(Valeurs4bx, Valeurs4by, axes=FALSE)
#---Partie 4c)---
hist(Xintervalle, freq=FALSE, main="Histogramme de densité de X", xlab="Valeur de x", ylab="Densité", xlim=c(0,u4), ylim=c(0.00,0.14)) #Créer l'histogramme
points(Valeurs4bx, Valeurs4by, xlim=c(0,u4), ylim=c(0.00,0.14), pch=16, col="blue", cex=0.4) #Créer la courbe correspondante à la courbe de densité de probabilité normale.
#---Partie 5)---
qqnorm(X, pch=16, col="blue", cex=0.4, main="Q-Q Plot") #Création du graphique
qqline(X) #Création de la droite de Henry
#---Partie 6)---
set.seed(08082000) 			#Pose une graine pour que la fonction runif() suivante donne toujours le même résultat
u2=runif(1,30,50)
X2=rchisq(2000,u2) 			#Génère une série "X" de 2000 valeurs selon une loi du chi2 de u degrès de liberté.
u3=3*u2 					#Nous permet simplement de créer une variable 3*u pour l'intervalle suivante.
Xintervalle2=X2[X2>=0 & X2<=(3*u2)] 	#Nous crééons l'intervalle entre [0,3u]. Encore une fois il est similaire à simplement X2.
hist(Xintervalle2, freq=FALSE, main="Histogramme de densité de X", xlab="Valeur de x", ylab="Densité", xlim=c(0,u3), ylim=c(0.00,0.05)) 	#Création de l'histogramme de densité de X2.
Valeurs6x=seq(0, u3, length.out=1000) 		#Produit 1000 valeurs x uniformément espacées dans l'intervalle [0,3u].
Valeurs6y=dnorm(Valeurs6x, mean=u2, sd=sqrt(2*u2)) 	#Produit 1000 valeurs y correspondantes y = f(x) suivant la densité de probabilité normale où la moyenne = u2 et l'écart-type vaut racine carrée de 2*u2.
plot(Valeurs6x, Valeurs6y, axes=FALSE)
hist(Xintervalle2, freq=FALSE, main="Histogramme de densité de X", xlab="Valeur de x", ylab="Densité", xlim=c(0,u3), ylim=c(0.00,0.05)) #Créer l'histogramme
points(Valeurs6x, Valeurs6y, xlim=c(0,u3), ylim=c(0.00,0.05), pch=16, col="blue", cex=0.4) #Créer la courbe correspondante à la courbe de densité de probabilité normale.
qqnorm(X2, pch=16, col="blue", cex=0.4, main="Q-Q Plot") #Création du graphique
qqline(X2) #Création de la droite de Henry
#exercice 4
#question 0
set.seed(04052004)
#question 1
G=runif(1,min=5,max=10)
#question 2
X = rpois(9000,G)
#question 3
library(moments)
#coefficient d'asymétrie
round(skewness(X),2) # la valeur est de 0.41
round(kurtosis(X),2)#la valeur est de 3.14
#question 4
#a
hist(X,xlim=c(0,4*G), main="valeur de X distribué selon une loi de poisson", xlab="distribution selon la loi de poisson", ylab="répartition des 9000 valeurs")
#b
X2=seq(0,4*G, length.out=1000)
Y= dnorm(X2,mean=G,sd=sqrt(G))
plot(X2,Y, axes=FALSE, main="diagramme de dispersion des valeurs des pairs xy", xlab="valeur de X2", ylab="valeur de Y")
#c
hist(X,xlim=c(0,4*G), main="superposition des deux graphiques", xlab="X", ylab="Y")
par(new =TRUE)
plot(X2,Y, axes=FALSE,main= "superposition des deux graphiques",xlab="X", ylab="Y")
#question 5
qqnorm(X, main="qq-plot normal des valeurs de X")
qqline(X)
#question 6
#question 0b
set.seed(04052004)
#question 1b
Gb=runif(1,min=30,max=50)
#question 2b
Xb=rchisq(2000,Gb)
#question 3b
round(skewness(Xb),2) # la valeur est de 0.49
round(kurtosis(Xb),2) #la valeur est de 3.34
#question 4b
# a
hist(Xb,xlim=c(0,3*Gb), main="valeur de Xb distribué selon une loi du chi2", xlab="distribution selon la loi du chi2", ylab="répartition des 2000 valeurs")
#b
Xb2=seq(0,3*Gb, length.out=2000)
Yb= dnorm(Xb2,mean=Gb,sd=sqrt(2*Gb))
plot(Xb2,Yb, axes=FALSE, main="diagramme de dispersion des valeurs des pairs xy", xlab="valeur de Xb2", ylab="valeur de Yb")
#c
hist(Xb,xlim=c(0,3*Gb))
par(new =TRUE)
plot(Xb2,Yb, axes=FALSE,main= "superposition des deux graphiques",xlab="Xb", ylab="Yb")
#question 5b
qqnorm(Xb, main="qq-plot normal des valeurs de Xb")
qqline(Xb)
# Partie 0 : "Stabilisation" du générateur
set.seed(04032004)
# Partie 1 : Génération et affichage de lambda distribuée uniformément dans l’intervalle 5 ≤ lambda ≤ 10.
lambda = runif(1,5,10)
print(lambda)  # lambda = 6.561939
# Partie 2 : Génération d'une série X de 9000 valeurs distribuées selon une loi de Poisson de paramètre lambda.
X = rpois(9000, lambda)
# Partie 3 : Caclul des coefficients d'asymétrie et d'aplatissement avec une précision de 2 décimales.
library(moments)
# Calcul du coefficient d'asymétrie
coef_asym = skewness(X)
# Arrondissement de ce coefficient à 2 décimales
coef_asym_arr = round(coef_asym, 2)
# Calcul du coefficient d'aplatissement
coef_apla = kurtosis(X)
# Arrondissment de ce coefficient à 2 décimales
coef_apla_arr = round(coef_apla, 2)
# Partie 4 : Production de l'histogramme des valeurs de X, dans l'intervalle [0, 4*lamnda]
# a) Histogramme de X limité à [0, 4*lambda]
hist(X, xlim = c(0,4*lambda), main = "Histogramme de X", xlab = "Valeurs de X", ylab = "Fréquence de X" )
# b)
# Création de x = 1000 valeurs espacées dans l'intervalle [0,4*lambda]
x = seq(0, 4*lambda, length.out = 1000)
# Création des densités correspondantes à ces 1000 valeurs, y = f(x) de la densité de probabilité normale de moyenne mu = lambda et d'écart-type sigma = racine de lambda
y = dnorm(x, mean = lambda , sd = sqrt(lambda))
# Création du diagramme de dispersion des valeurs des paires (x,y) dans ce même intervalle
plot(x,y, xlim = c(0, 4*lambda), axes = FALSE, xlab = "", ylab = "")
# c) Superposition des 2 graphiques
hist(X, xlim = c(0,4*lambda), main = "Diagramme de dispersion de (x,y)", xlab = "Valeurs de x", ylab = "f(x) = densité de probabilité normale"  )
par(new = TRUE)
plot(x,y, xlim = c(0, 4*lambda),axes = FALSE, xlab = "", ylab = "")
# Partie 5 : Création du qq-plot normal des valeurs de X, et la droite de Henry correspondante
# Création d'un graphique dont les ordonnée sont les valeurs de X, et les abscisses les quantiles théoriques normaux correspondants.
qqnorm(X, main = "Qq-plot normal des valeurs de X", xlab = "Quantiles théoriques normaux correspondants aux valeurs de X", ylab = "Valeurs de X")
# Création de la droite de Henry : droite théorique normale correspodante.
qqline(X, main = "Droite de Henry : droite théorique normale", xlab = "Quantiles théoriques normaux correspondants aux valeurs de X", ylab = "Valeurs de X")
# 1)
lambda_bis = runif(1,30,50)
print(lambda_bis)  # lambda_bis = 49.85167
# 2)
X_bis =  rchisq(2000,lambda_bis)
# 3)
hist(X_bis, xlim = c(0,3*lambda_bis), main = "Histogramme de X_bis", xlab = "Valeurs de X_bis", ylab = "Fréquence de X_bis")
par(new = TRUE)
x_bis = seq(0, 3*lambda_bis, length.out = 1000)
# Création des densités correspondantes à ces 1000 valeurs, y = densité de probabilité normale de moyenne mu = lamnda et d'écart-type sigma = racine de lambda
y_bis = dnorm(x_bis, mean = lambda_bis , sd = sqrt(2*lambda_bis))
# Création du diagramme de dispersion des valeurs des paires (x,y) dans ce même intervalle
plot(x_bis,y_bis, xlim = c(0, 3*lambda_bis), ylab ="", xlab = "", axes = FALSE)
set.seed(12112002)  #stabilisation du générateur
#QUESTION 1
λ=runif(1,5,10)
λ   #génération d'une valeur distribuée uniformément
#QUESTION 2
X=rpois(9000, λ)
X   #série X de valeur distribuée selon une loi de Poisson
#QUESTION 3
round(skewness(X),2)  #calcul du coefficient d'asymétrie arrondi à 2 décimales
round(kurtosis(X),2)  #calcul du coefficient d'aplatissement arrondi à 2 décimales
#QUESTION 4
#a
hist(X, xlim=c(0,4*λ), main='histogramme de X')
#b
x2=seq(0,4*λ, length.out=1000)
y2=dnorm(x2, mean = λ, sd = sqrt(λ))
plot(x2,y2, axes=FALSE,xlab="", ylab="",pch =20, cex=0.1)
#c
hist(X, xlim=c(0,4*λ), main='histogramme de X')
par(new=TRUE)
#cette fonction permet de superposer les 2 graphiques et de voir que X suit bien une distribution normale
plot(x2,y2, axes=FALSE,xlab="", ylab="",pch =20, cex=0.1)
#QUESTION 5
qqnorm(X, pch=20, cex=0.5)  #création des qq-plot avec les valeurs de X
qqline(X, col='red')        #ajout de la droite de Henry
#QUESTION 6
λ2=runif(1,30, 50)
λ2
X2=rchisq(2000, λ2)
X2
round(skewness(X2),2)
round(kurtosis(X2),2)
hist(X2, xlim=c(0,3*λ2), main='histogramme de X2')
x3=seq(0,3*λ2, length.out=1000)
y3=dnorm(x3, mean = λ2, sd = sqrt(2*λ2))
plot(x3, y3, axes=FALSE, xlab="", ylab="",pch =20, cex=0.1)
hist(X2, xlim=c(0,3*λ2), main='histogramme de X2')
par(new=TRUE)
plot(x3,y3, axes=FALSE,xlab="", ylab="",pch =20, cex=0.1)
qqnorm(X2, pch=20, cex=0.5)
qqline(X2, col='blue')
## Exercice 4.6
#.1
runif (1,30,50)  # delta = 30.31623
#.2
X2=rpois(2000,30.31623)
#4a
hist(X2, xlim= c(0,3*30.31623), main = "Histogramme de X")
## Exercice 4.1
runif (1,5,10)  # delta = 7.430529
## Exercice 4.0
set.seed(21082004)
## Exercice 4.1
runif (1,5,10)  # delta = 7.430529
## Exercice 4.2
X=rpois(9000,7.430529)
skewness("moments")
kurtosis("moments")
## Exercice 4.0
set.seed(21082004)
## Exercice 4.1
runif (1,5,10)  # delta = 7.430529
## Exercice 4.2
X=rpois(9000,7.430529)
skewness("moments")
kurtosis("moments")
## Exercice 4.4a
hist(X, xlim= c(0,4*7.430529), main = "Histogramme de X")
x_valeurs <- seq(from=0, to=4*7.430529, length.out=1000)
y_valeurs <- dnorm(x_valeurs, mean= 7.430529, sd= 7.430529^0.5, log= FALSE)
plot(x_valeurs, y_valeurs, axes = FALSE, xlab = "x", ylab = "f(x)")
## Exercice 4.4c
hist(X, xlim= c(0,4*7.430529), main = "Histogramme de X")
par(new=TRUE)
plot(x_valeurs, y_valeurs, axes = FALSE, xlab = "x", ylab = "f(x)")
## Exercice 4.5
qqnorm(X,main="QQ Plot")
qqline(X)
legend(x="bottomright","--- Droite de Henry",cex = 0.6)
## Exercice 4.6
#.1
runif (1,30,50)  # delta = 30.31623
#.2
X2=rpois(2000,30.31623)
#4a
hist(X2, xlim= c(0,3*30.31623), main = "Histogramme de X")
x_valeurs2 <- seq(from=0, to=4*30.31623, length.out=1000)
y_valeurs2 <- dnorm(x_valeurs, mean= 30.31623, sd= (2*30.31623)^0.5, log= FALSE)
#.4c
hist(X2, xlim= c(0,3*30.31623), main = "Histogramme de X")
par(new=TRUE)
plot(x_valeurs2, y_valeurs2, axes = FALSE, xlab = "x", ylab = "f(x)")
#.5
qqnorm(X2)
qqline(X2)
legend(x="bottomright","--- Droite de Henry",cex = 0.6)
# 0)
set.seed(11082004) # stabilation du génératuer
# 1)
lambda = runif(1,min=5, max=10) # génération de la valeur lambda uniformement dans l'intervalle entre 5 et 10
print(lambda) # affichage de lambda
# 2)
X = rpois(9000, lambda) # loi de poisson avec 9000 valeurs et lambda
asym = skewness(X) # valeur de l'asymétrie de X
aplat = kurtosis(X) # valeur de l'aplatissement de X
asym_arondi= round(asym,2) # valeurs arondi a deux décimale
aplat_arondi= round(aplat,2) # valeurs arondi a deux décimale
print(asym_arondi) # affichage
print(aplat_arondi) # affichage
# 4a)
hist(X,xlim=c(0,4*lambda), main="Histogramme des valeurs de X", xlab="Valeurs de X", ylab= "Fréquence")
# 4b)
x = seq(0,4*lambda, length.out=1000) # création de 1000 valeurs régulièrement espacées dans l'intervalle 0 à 4*lambda
y = dnorm(x, mean = lambda, sd = sqrt(lambda)) # valuers y coréspondantes avec la densité de probalilité normale
plot(x,y, axes=FALSE, main= "Diagramme de dispersion") # diagramme de dispersion sans axes
# 4c)
hist(X,xlim=c(0,4*lambda), main="Superposition", xlab="Valeurs de X", ylab= "Fréquence")
par(new=TRUE) # superposition des deux graphiques
plot(x,y, axes=FALSE, ylab="", xlab="")
# 5)
qqnorm(X) # Q-Q plot normale
qqline(X) # droite de Henry
# 6)
lambda2 = runif(1,min=30, max=50) # création de la valeur lambda dans l'intervalle entre 30 et 50
print(lambda2) # affichage de lambda
Y = rchisq(2000, lambda2) # loi de Chi2 de 2000 tirages et de lambda degrée de liberté
asym2 = skewness(Y) # valeur de l'asymétrie de Y
aplat2 = kurtosis(Y) # valeur de l'aplatissement de Y
asym_arondi2= round(asym,2) # valeurs arondi à deux décimales
aplat_arondi2= round(aplat,2) # valeurs arondi à deux décimales
print(asym_arondi2) # affichage
print(aplat_arondi2) # affichage
hist(Y,xlim=c(0,3*lambda2), main="Histogramme des valeurs de Y", xlab="Valeurs de Y", ylab= "Fréquence")
x2 = seq(0,3*lambda2, length.out=1000) # création de 1000 valeurs régulièrement espacées dans l'intervalle 0 à 4*lambda
y2 = dnorm(x2, mean = lambda2, sd = sqrt(2*lambda2)) # valuers y coréspondantes avec la densité de probalilité normale
plot(x2,y2, axes=FALSE, main= "Diagramme de dispersion") # diagramme de dispersion sans axes
hist(Y,xlim=c(0,3*lambda2), main="Superposition", xlab="Valeurs de Y", ylab= "Fréquence")
par(new=TRUE) # superposition des deux graphiques
plot(x2,y2, axes=FALSE, ylab="", xlab="")
qqnorm(Y) # Q-Q plot
qqline(Y) # droite de Henry
# Libraries
library(tidyverse)
library(magrittr)
library(vegan)
library(corrplot)
library(codep)
library(FactoMineR)
library(factoextra)
library(dendextend)
library(ggplot2)
library(readxl)
setwd('~/Documents/GitHub/master-project-cleaned/pre_processing/cluster')
# Presence/absence ----------------------------------------
data_main <- read_excel("max_all_storms_pca") # read-in data
# Presence/absence ----------------------------------------
data_main <- read_csv("max_all_storms_pca.csv") # read-in data
View(data_main)
PCA_wind <- PCA(data_main, graph= TRUE)
fviz_screeplot(PCA_wind, ncp=10)
# Presence/absence ----------------------------------------
data_main <- read_csv("max_all_storms_pca.csv") # read-in data
# Presence/absence ----------------------------------------
data_main <- read_csv("max_all_storms_pca.csv") # read-in data
PCA_wind <- PCA(data_main, graph= TRUE)
fviz_screeplot(PCA_wind, ncp=10)
setwd('~/Documents/GitHub/master-project-cleaned/pre_processing/cluster')
# Presence/absence ----------------------------------------
data_main <- read_csv("max_all_storms_pca.csv") # read-in data
PCA_wind <- PCA(data_main, graph= TRUE)
fviz_screeplot(PCA_wind, ncp=10)
setwd('~/Documents/GitHub/master-project-cleaned/pre_processing/cluster')
# Presence/absence ----------------------------------------
data_main <- read_csv("max_all_storms_pca.csv") # read-in data
PCA_wind <- PCA(data_main, graph= TRUE)
fviz_screeplot(PCA_wind, ncp=10)
